   Paul Dapolito & Jean Sung - Domain-Specific Languages
   Actual Grammar for Piconot (external) 

   	// maze file name
   	letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c"
       | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k"
       | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s"
       | "t" | "u" | "v" | "w" | "x" | "y" | "z"
    filename = {letter}, ".bot"

    // states can be any number of digits
 	digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
 	state = { digit } ;
 
 	// a surrounding is given by the direction or a restriction or a wildcard
	direction = "N" | "E" | "W" | "S" ;
 	surrounding component = direction | "x" | "*" ;
 	surrounding = surrounding component,  component, surrounding component, surrounding component ;
 
 	// left hand side of arrow has state and surrounding 
 	lhs = state, surrounding ;
 
 	// right hand side specifies movement and next state to go to  
 	movement = direction | "X" ;
 	rhs = movement, state ;
 
 	// a rule is a complete statement, the grammar is any number of rules 
 	rule = lhs , "->", rhs ; 
 	grammar = filename, { rule } ; 
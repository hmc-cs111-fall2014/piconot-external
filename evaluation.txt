PriorityBot - Chloe Calvarin and Matt Cook

# Monday 6th, in class
We redefined the ideal grammar and pseudo-coded it to see what should be a case 
class, and what should be a type.

# Wednesday 8th, in class
Started working on the Intermediate Representation and parser. We did not 
settle on a final IR, since the parsing step kept showing us that some things 
would work, and some wouldn't.

# Thursday 9th
Finished the parser. No major syntax changes yet. We realized we aren't taking 
much advantage of the external language capabilities, since we have such a 
simple type system.

# Saturday 11th
Implemented most of the semantics. We decided to implement using our internal 
DSL so we don't have to redo all of the mappings of Cardinal directions to
relative directions. One thing we do realize is that we now need to take care
of the "Anything" case, as we could have anywhere from 1-4 rules, where if there
are less than 4 rules the "Anything" has to take care of all of the remaining
rules. We spent a fair amount of time figuring out eclipse project type stuff. 
We ended up deciding to just include our internal DSL file rather than making
a jar as that would be easier when someone needs to download our source to not
need to get the jar too.

# Sunday 12th
As we are finishing up the semantics, we are realizing we used a lot of the same 
names as the original picolib. Having a lot of explicit calls to 
library.package.type does not look great, so we decided to just rename some of 
our stuff in the AST. Our Picobot is not Priobot, and our Rule is now PrioRule.

We started making tests, and despaired at typing in the ugly picolib syntax, 
when we realized that we could use our internal DSL syntax instead!

Now we are having trouble running the JFX app object that we are creating
in the evaluation step.

# Later... on Sunday the 12th
We fixed our problem with the JFX app after making specific eval methods that 
will return the right type. This removed a lot of explicit casts, and allowed 
us to return the Picobot extends TextDisplay extends GUIDisplay we needed. 
Then, with Prof Ben's helpful Piazza post about parameters.raw, we realized 
we didn't need to override main and impede any hope of running the JFXApp 
properly.

It now works! So excited. We still need to add some documentation. We added
the final working grammar. It's nearly identical, we only used the * as a 
wildcard instead of typing out Anything, and we technically accept any number
of rules, since any but the first rule gets ignored. We also did not add the 
option to have both F and Front as relative direction inputs, since single
characters actually looks cleaner.

Finally, we added some nicer error messages to our parser.
